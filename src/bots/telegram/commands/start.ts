import { UserService } from "@/services/user.service";
import { UserErrorCodes } from "@/types/errors/UserError";
import { SharedContext } from "@/types/grammy/SessionData";
import { CommandContext } from "grammy";
import { homeKeyboard } from "../controllers/navigationController";

export const startCommand = async (ctx: CommandContext<SharedContext>) => {
  const user = ctx.sfx?.user;
  if(!user) return;

  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ start=link_<code>
  const payload = ctx.match;
  if(payload?.startsWith("link_")) {
    const code = payload.slice(5);

    try {
      await UserService.confirmLink(code, user.id);
      return await ctx.reply("‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëè");
    } catch (err: any) {
      const message =
        err.code === UserErrorCodes.LINK_CODE_INVALID
          ? "‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
          : err.message ?? "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞";

      console.error('[tg/start/link]', err);

      return await ctx.reply(message);
    }
  }

  // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${user.firstName || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CrowdPass* ‚Äî –≤–∞—à–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!

–í—ã –º–æ–∂–µ—Ç–µ:
- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
- –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã
- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
- –ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã —Å QR-–∫–æ–¥–æ–º –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá`,
    {
      parse_mode: "Markdown",
      reply_markup: homeKeyboard,
    }
  );
};
