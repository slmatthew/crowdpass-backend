import { Api, Bot, Context, InlineKeyboard, RawApi } from "grammy";
import { extraGoToHomeKeyboard } from "../markups/extraGoToHomeKeyboard";
import { bookingSessions } from "../sessions/bookingSession";
import { sendBookingsPage } from "../utils/paginator";
import { bookingTimeouts } from "../sessions/bookingTimeouts";
import { BookingService } from "@/services/bookingService";
import { BookingError } from "@/types/errors/BookingError";
import { EventService } from "@/services/eventService";
import { TicketService } from "@/services/ticketService";
import { SharedContext } from "@/types/grammy/SessionData";

export function handleBookingCallbacks(bot: Bot<SharedContext, Api<RawApi>>) {
  bot.callbackQuery(/^book_(\d+)_(\d+)$/, async (ctx) => {
    const eventId = Number(ctx.match[1]);
    const fromPage = Number(ctx.match[2]);
    const userId = ctx.from?.id.toString();
  
    if (!userId) {
      await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏." });
      return;
    }
  
    bookingSessions[userId] = { eventId, fromPage };

    bookingTimeouts[userId] = setTimeout(async () => {
      if (bookingSessions[userId]) {
        await ctx.reply(`üîî –í—ã –Ω–∞—á–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –µ–≥–æ.
  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ /cancel.`);
        delete bookingTimeouts[userId]; // –ß–∏—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      }
    }, 120000); // 2 –º–∏–Ω—É—Ç—ã
  
    const ticketTypes = await TicketService.getTicketTypesForEvent(eventId, true);
  
    if (ticketTypes.length === 0) {
      await ctx.editMessageText("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.", extraGoToHomeKeyboard);
      await ctx.answerCallbackQuery();
      return;
    }
  
    const keyboard = new InlineKeyboard();
  
    ticketTypes.forEach((type) => {
      const availableCount = type.tickets.filter(t => t.status === "AVAILABLE").length;
      if (availableCount > 0) {
        keyboard.text(`${type.name} ‚Äî ${type.price}‚ÇΩ (${availableCount} —à—Ç.)`, `selectType_${type.id}`);
        keyboard.row();
      }
    });
  
    keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", `back_to_event_${eventId}_${fromPage}`);
  
    await ctx.editMessageText(
      "üéüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:",
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      }
    );
  
    await ctx.answerCallbackQuery();
  });

  bot.callbackQuery(/^back_to_event_(\d+)_(\d+)$/, async (ctx) => {
    const eventId = Number(ctx.match[1]);
    const fromPage = Number(ctx.match[2]);
  
    const event = await EventService.getEventById(eventId);
  
    if (!event) {
      await ctx.answerCallbackQuery({ text: "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ." });
      return;
    }
  
    const keyboard = new InlineKeyboard()
      .text("üéüÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç", `book_${eventId}_${fromPage}`)
      .row()
      .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", `back_to_events_${fromPage}`);
  
    await ctx.editMessageText(
      `üé´ *${event.name}*\n\n${event.description}\n\nüìÖ –î–∞—Ç–∞: ${event.startDate.toLocaleString()}\nüìç –ú–µ—Å—Ç–æ: ${event.location}`,
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      }
    );
  
    await ctx.answerCallbackQuery();
  });

  bot.callbackQuery(/^selectType_(\d+)$/, async (ctx) => {
    const ticketTypeId = Number(ctx.match[1]);
    const userId = ctx.from?.id.toString();
  
    if (!userId || !bookingSessions[userId]) {
      await ctx.answerCallbackQuery({ text: "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ" });
      return;
    }
  
    bookingSessions[userId].ticketTypeId = ticketTypeId;
  
    await ctx.editMessageText(
      "üéüÔ∏è –°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
      { parse_mode: "Markdown" }
    );
  
    await ctx.answerCallbackQuery();
  });

  bot.callbackQuery(/^cancel_(\d+)_(\d+)$/, async (ctx) => {
    const bookingId = Number(ctx.match[1]);
    const page = Number(ctx.match[2]);
    const userId = ctx.from?.id.toString();

    if (!userId || !ctx.sfx.user?.id) {
      await ctx.reply("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
    }

    try {
      await BookingService.cancelBooking(bookingId);
      await ctx.answerCallbackQuery({ text: "‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞." });
      await sendBookingsPage(ctx, userId, page, true);
    } catch(err) {
      if(err instanceof BookingError) {
        console.error(`[BookingCancel/${err.code}] ${err.message}`, err.metadata);

        await ctx.answerCallbackQuery(`‚ùó ${err.message}`);
      } else {
        console.error(`[BookingCancel]`, err);
        await ctx.answerCallbackQuery(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`);
      }
    }
  });

  bot.callbackQuery(/^mybookings_page_(\d+)$/, async (ctx) => {
    const page = Number(ctx.match[1]);
    const userId = ctx.from?.id.toString();
    if (!userId) return;
    await ctx.answerCallbackQuery();
    await sendBookingsPage(ctx, userId, page, true);
  });

  bot.callbackQuery(/^confirm_booking_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    if (!userId || !bookingSessions[userId]) {
      await ctx.answerCallbackQuery();
      await ctx.reply("‚ö†Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
      return;
    }

    const session = bookingSessions[userId!];

    if (!session.ticketTypeId || !session.ticketsCount || !ctx.sfx.user?.id) {
      await ctx.reply("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.");
      delete bookingSessions[userId];
      return;
    }

    try {
      const booking = await BookingService.makeBooking(ctx.sfx.user?.id, session.ticketTypeId, session.ticketsCount);
      
      await ctx.editMessageText(
        `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ ${session.ticketsCount} –±–∏–ª–µ—Ç(–∞/–æ–≤)!\n\n–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${booking.id}`,
        extraGoToHomeKeyboard
      );
    } catch(err) {
      if(err instanceof BookingError) {
        console.error(`[BookingMake/${err.code}] ${err.message}`, err.metadata);

        await ctx.editMessageText(
          `‚ùó ${err.message}`,
          extraGoToHomeKeyboard
        );
      } else {
        console.error(`[BookingMake]`, err);
        await ctx.editMessageText(
          `‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`,
          extraGoToHomeKeyboard
        );
      }
    } finally {
      if (bookingTimeouts[userId]) {
        clearTimeout(bookingTimeouts[userId]);
        delete bookingTimeouts[userId];
      }
  
      delete bookingSessions[userId];    
  
      await ctx.answerCallbackQuery();
    }
  });

  bot.callbackQuery(/^cancel_booking_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    if (!userId) return;

    if (bookingTimeouts[userId]) {
      clearTimeout(bookingTimeouts[userId]);
      delete bookingTimeouts[userId];
    }

    delete bookingSessions[userId];

    await ctx.answerCallbackQuery();
    await ctx.editMessageText("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", extraGoToHomeKeyboard);
  });
}