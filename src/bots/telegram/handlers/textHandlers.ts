import { Bot, Api, RawApi, InlineKeyboard } from "grammy";
import { extraGoToHomeKeyboard } from "../constants/extraGoToHomeKeyboard";
import { SharedContext } from "@/types/grammy/SessionData";
import { vk } from "@/bots/vk";
import { UserService } from "@/services/userService";
import { Platform } from "@prisma/client";
import { UserError } from "@/types/errors/UserError";
import { sendLinkRequest } from "@/bots/core/utils/sendLinkRequest";
import { TicketService } from "@/services/ticketService";
import { bookingSessionService } from "@/bots/core/services/BookingSessionService";
import { TelegramStrategy } from "../controllers/TelegramStrategy";

export function handleText(bot: Bot<SharedContext, Api<RawApi>>) {
  bot.on("message:text", async (ctx) => {
    if(ctx.session?.step === 'link.awaiting_vk') {
      const user = ctx.sfx.user;
      if(!user) return await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');

      const input = ctx.message.text.trim();

      const cleaned = input
        .replace(/^https?:\/\/(www\.)?vk\.com\//i, '')
        .replace(/^@/, '')
        .trim();

      try {
        const [vkProfile] = await vk.api.users.get({ user_ids: [cleaned], fields: ['verified'] });
        const vkId = vkProfile.id.toString();

        const canWriteMessage = await vk.api.messages.isMessagesFromGroupAllowed({
          user_id: vkProfile.id,
          group_id: Number(process.env.VK_BOT_ID!)
        });

        if(!canWriteMessage.is_allowed) return await ctx.reply('‚ùå –°–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É ‚Äì –∏ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è: vk.me/crowdpass');

        const { code, targetUser } = await UserService.startLinkProcedure({
          sourceUserId: user?.id,
          targetPlatform: Platform.VK,
          targetIdentifier: vkId
        });

        await sendLinkRequest(Platform.VK, vkProfile.id, code);

        await ctx.reply('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –µ–≥–æ –≤ VK.');
      } catch(err) {
        if(err instanceof UserError) {
          console.error(`[tg/LinkCommand/${err.code}] ${err.message}`, err.metadata);
          await ctx.reply(`‚ùó ${err.message}`);
        } else {
          console.error('[tg/LinkCommand]', err);
          await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        }
      } finally {
        ctx.session.step = null;
      }

      return;
    }

    const user = ctx.sfx.user!;
    const session = bookingSessionService.getSession(user.id);
  
    if (!session || !session.ticketTypeId || session.step !== 'ask_count') {
      return await ctx.reply("‚ùì –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", extraGoToHomeKeyboard);
    }
  
    const count = parseInt(ctx.message.text.trim());
  
    if (isNaN(count) || count <= 0) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã");
      return;
    }
  
    const availableTickets = await TicketService.getAvailableTickets(session.ticketTypeId, count);
  
    if (availableTickets.length < count) {
      await ctx.reply(`üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${availableTickets.length}`);
      return;
    }

    bookingSessionService.setSession(user.id, { ...session, step: 'end', ticketsCount: count });

    const keyboard = new InlineKeyboard()
      .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", TelegramStrategy.callbackPayloads.bookingConfirm(user.id) as string)
      .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", TelegramStrategy.callbackPayloads.bookingCancel(user.id) as string);

    await ctx.react('üëå');

    await ctx.reply(`–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å *${count}* –±–∏–ª–µ—Ç(–æ–≤).\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  });
}