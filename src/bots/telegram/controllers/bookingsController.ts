import { TicketService } from "@/services/ticketService";
import { bookingSessions } from "../sessions/bookingSession";
import { bookingTimeouts } from "../sessions/bookingTimeouts";
import { ControllerContext } from "./ControllerContext";
import { extraGoToHomeKeyboard } from "../constants/extraGoToHomeKeyboard";
import { InlineKeyboard } from "grammy";
import { callbackPayloads } from "../utils/callbackPayloads";
import { BookingService } from "@/services/bookingService";
import { BookingError } from "@/types/errors/BookingError";
import { PAGE_SIZE } from "@/constants/appConstants";
import dayjs from "dayjs";
import { CallbackAction } from "../constants/callbackActions";
import { SharedContext } from "@/types/grammy/SessionData";

const TELEGRAM_PAYMENTS_LIVE = process.env.NODE_ENV !== 'development';
const TELEGRAM_PAYMENTS_TOKEN = TELEGRAM_PAYMENTS_LIVE ? process.env.TELEGRAM_PAYMENTS_TEST_TOKEN : process.env.TELEGRAM_PAYMENTS_LIVE_TOKEN;

export async function sendMyBookings(ctx: ControllerContext, page: number = 1) {
  const user = ctx.sfx.user;

  try {
    await ctx.answerCallbackQuery();
  } catch (err) {}
  
  if (!user) {
    try {
      await ctx.editMessageText("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", extraGoToHomeKeyboard);
    } catch(err) {
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", extraGoToHomeKeyboard);
    }
    return;
  }

  const bookings = await BookingService.getByUserId(user.id);

  if (bookings.length === 0) {
    try {
      await ctx.editMessageText("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π üòî", extraGoToHomeKeyboard);
    } catch(err) {
      await ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π üòî", extraGoToHomeKeyboard);
    }
    return;
  }

  const totalPages = Math.ceil(bookings.length / PAGE_SIZE);
  const startIndex = (page - 1) * PAGE_SIZE;
  const endIndex = startIndex + PAGE_SIZE;
  const bookingsPage = bookings.slice(startIndex, endIndex);

  let text = `üéüÔ∏è *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç—Ä. ${page}/${totalPages}):*\n\n`;
  const keyboard = new InlineKeyboard();

  bookingsPage.forEach((booking, index) => {
    const event = booking.bookingTickets[0]?.ticket.ticketType.event;
  
    if (event) {
      text += `*${startIndex + index + 1}.* ${event.name}\nüìÖ ${dayjs(event.startDate).format("DD.MM.YYYY")} | üìç ${event.location}\n`;
  
      const ticketGroups = booking.bookingTickets.reduce((acc, bt) => {
        const type = bt.ticket.ticketType.name;
        const price = (bt.ticket.ticketType.price as unknown) as number;
        const key = `${type}_${price}`;
        if (!acc[key]) {
          acc[key] = { type, price, count: 0 };
        }
        acc[key].count++;
        return acc;
      }, {} as Record<string, { type: string; price: number; count: number }>);
  
      text += `üéüÔ∏è –ë–∏–ª–µ—Ç—ã:\n`;
  
      for (const groupKey in ticketGroups) {
        const group = ticketGroups[groupKey];
        const totalCost = group.price * group.count;
        text += `- ${group.type} √ó ${group.count} ‚Äî ${group.price}‚ÇΩ (${totalCost}‚ÇΩ)\n`;
      }
  
      text += `\n`;
  
      keyboard.text(`üí∏ #${startIndex + index + 1}`, callbackPayloads.myBookingPay(booking.id, page));
      keyboard.text(`‚ùå #${startIndex + index + 1}`, callbackPayloads.myBookingCancel(booking.id, page));
      keyboard.row();
    }
  });  

  if (page > 1) {
    keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callbackPayloads.myBookingsPage(page - 1));
  }
  if (page < totalPages) {
    keyboard.text("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callbackPayloads.myBookingsPage(page + 1));
  }

  keyboard.row();
  keyboard.text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', CallbackAction.GO_HOME);

  try {
    await ctx.editMessageText(text, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  } catch(err) {
    await ctx.reply(text, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  }
}

export async function sendMyBookingPaySimple(ctx: ControllerContext, bookingId: number, page: number) {
  if(TELEGRAM_PAYMENTS_LIVE) {
    try {
      await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    } catch(err) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
    return;
  }

  const user = ctx.sfx.user!;
  const booking = await BookingService.getById(bookingId);

  if(!booking || !user || booking.userId !== user.id) {
    try {
      await ctx.answerCallbackQuery('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
    } catch(err) {}
    return await sendMyBookings(ctx, page);
  }

  const res = await BookingService.payBooking(booking.id);
  
  try {
    if(res) {
      await ctx.answerCallbackQuery('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ');
      await sendMyBookings(ctx, page);
    } else {
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      await sendMyBookings(ctx, page);
    }
  } catch(err) {
    if(res) {
      await ctx.reply('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ');
      await sendMyBookings(ctx, page);
    } else {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      await sendMyBookings(ctx, page);
    }
  }
}

export async function sendMyBookingPay(ctx: ControllerContext, bookingId: number, page: number) {
  const user = ctx.sfx.user!;
  const booking = await BookingService.getById(bookingId);

  const keyboard = new InlineKeyboard().text('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º', callbackPayloads.myBookingsPage(page));

  const reject = async (text: string) => {
    try {
      await ctx.answerCallbackQuery();
      await ctx.editMessageText(text, { reply_markup: keyboard });
    } catch(err) {
      await ctx.reply(text, { reply_markup: keyboard });
    }
  };

  if(!booking || booking.userId !== user.id || booking.status !== "ACTIVE") {
    await reject("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
    return;
  }

  if(booking.bookingTickets.length === 0) {
    await reject("‚ùå –≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ–ø–ª–∞—Ç–∏—Ç—å");
    return;
  }

  const event = booking.bookingTickets[0].ticket.ticketType.event;

  let price: number = 0;
  const labeledPrice: { label: string, amount: number }[] = [];
  for(const bkTicket of booking.bookingTickets) {
    price += Number(bkTicket.ticket.ticketType.price);
    labeledPrice.push({ label: `–ë–∏–ª–µ—Ç ${bkTicket.ticket.ticketType.name} #${bkTicket.ticket.id}`, amount: Number(bkTicket.ticket.ticketType.price) * 100 });
  }

  /**
   * https://core.telegram.org/bots/payments#supported-currencies
   * –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–∏–Ω–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö
   * —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 87.73 RUB. –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã Telegram
   * —Å–¥–µ–ª–∞–Ω–∞ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∞—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è,
   * –µ—Å–ª–∏ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ –º–µ–Ω—å—à–µ 100 RUB
   */
  if(price < 100) {
    if(TELEGRAM_PAYMENTS_LIVE) {
      await ctx.answerCallbackQuery('–û–ø–ª–∞—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
      await ctx.reply(
        `‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ Telegram.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ /support –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∫ –æ–ø–ª–∞—Ç–µ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏: ${booking.id}`,
        { reply_markup: extraGoToHomeKeyboard }
      );
    } else {
      await sendMyBookingPaySimple(ctx, bookingId, page);
    }

    return;
  }

  await ctx.api.sendInvoice(
    ctx.chat!.id,
    `CrowdPass ‚ÑñB${booking.id}`,
    `–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ${booking.id} –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –±–∏–ª–µ—Ç—ã (${booking.bookingTickets.length} —à—Ç.) –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´${event.name}¬ª –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${price} ‚ÇΩ`,
    `${booking.id}-${user.id}-booking`,
    'RUB',
    labeledPrice,
    {
      provider_token: TELEGRAM_PAYMENTS_TOKEN,
    },
  );
}

export async function sendMyBookingPayPreCheckout(ctx: ControllerContext) {
  if(!ctx.sfx.user || !ctx.preCheckoutQuery) return;

  const bookingId = Number(ctx.match[1]);
  const userId = Number(ctx.match[2]);

  const booking = await BookingService.getById(bookingId);

  if(userId !== ctx.sfx.user.id || !booking || booking.userId !== ctx.sfx.user.id || booking.status !== "ACTIVE") {
    return await ctx.answerPreCheckoutQuery(false, { error_message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ' });
  }

  await ctx.answerPreCheckoutQuery(true); 
}

export async function sendMyBookingPaySuccess(ctx: SharedContext) {
  const payment = ctx.message?.successful_payment;
  if(!payment) return await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`);;

  const match = payment.invoice_payload.match(/^(\d+)-(\d+)-payment$/);
  if(!match) return await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`);;

  const bookingId = Number(match[1]);
  await BookingService.payBooking(bookingId);

  await ctx.reply('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–æ');

  await sendMyBookings(ctx as ControllerContext);
}

export async function sendMyBookingCancel(ctx: ControllerContext, bookingId: number, page: number) {
  const userId = ctx.from?.id.toString();
  
  if (!userId || !ctx.sfx.user?.id) {
    await ctx.reply("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
  }

  try {
    await BookingService.cancelBooking(bookingId);
    await ctx.answerCallbackQuery({ text: "‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞." });
    await sendMyBookings(ctx, page);
  } catch(err) {
    if(err instanceof BookingError) {
      console.error(`[BookingCancel/${err.code}] ${err.message}`, err.metadata);

      await ctx.answerCallbackQuery(`‚ùó ${err.message}`);
    } else {
      console.error(`[BookingCancel]`, err);
      await ctx.answerCallbackQuery(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`);
    }
  }
}

export async function sendBookingStart(ctx: ControllerContext, eventId: number, fromPage: number, categoryId: number, subcategoryId: number) {
  const userId = ctx.from?.id.toString();

  if (!userId) {
    await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏." });
    return;
  }

  bookingSessions[userId] = { eventId, fromPage };

  bookingTimeouts[userId] = setTimeout(async () => {
    if (bookingSessions[userId]) {
      await ctx.reply(`üîî –í—ã –Ω–∞—á–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –µ–≥–æ.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ /cancel.`);
      delete bookingTimeouts[userId];
    }
  }, 120000);

  const ticketTypes = await TicketService.getTicketTypesForEvent(eventId, true);
  if (ticketTypes.length === 0) {
    await ctx.editMessageText("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.", extraGoToHomeKeyboard);
    await ctx.answerCallbackQuery();
    return;
  }

  const keyboard = new InlineKeyboard();
  let totalAvailable: number = 0;

  ticketTypes.forEach((type) => {
    const availableCount = type.tickets.filter(t => t.status === "AVAILABLE").length;
    totalAvailable += availableCount;
    if (availableCount > 0) {
      keyboard.text(`${type.name} ‚Äî ${type.price}‚ÇΩ (${availableCount} —à—Ç.)`, callbackPayloads.bookingSelectType(type.id));
      keyboard.row();
    }
  });

  if(totalAvailable === 0) {
    await ctx.editMessageText("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.", extraGoToHomeKeyboard);
    await ctx.answerCallbackQuery();
    return;
  }

  if(categoryId === 0 && subcategoryId === 0) {
    keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", callbackPayloads.eventDetails(eventId, fromPage));
  } else if(categoryId !== 0) {
    keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", callbackPayloads.eventDetailsCategory(eventId, fromPage, categoryId));
  } else if(subcategoryId !== 0) {
    keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", callbackPayloads.eventDetailsSubcategory(eventId, fromPage, subcategoryId));
  }

  await ctx.editMessageText(
    "üéüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:",
    {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    }
  );

  await ctx.answerCallbackQuery();
}

export async function sendBookingSelectType(ctx: ControllerContext, ticketTypeId: number) {
  const userId = ctx.from?.id.toString();
  
  if(!userId || !bookingSessions[userId]) {
    await ctx.answerCallbackQuery({ text: "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ" });
    return;
  }

  bookingSessions[userId].ticketTypeId = ticketTypeId;

  await ctx.editMessageText(
    "üéüÔ∏è –°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );

  await ctx.answerCallbackQuery();
}

export async function sendBookingConfirm(ctx: ControllerContext, userId: number) {
  if (!userId || !bookingSessions[userId]) {
    await ctx.answerCallbackQuery();
    await ctx.reply("‚ö†Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
    return;
  }

  const session = bookingSessions[userId!];

  if (!session.ticketTypeId || !session.ticketsCount || !ctx.sfx.user?.id) {
    await ctx.reply("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.");
    delete bookingSessions[userId];
    return;
  }

  try {
    const booking = await BookingService.makeBooking(ctx.sfx.user?.id, session.ticketTypeId, session.ticketsCount);
    
    await ctx.editMessageText(
      `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ ${session.ticketsCount} –±–∏–ª–µ—Ç(–∞/–æ–≤)!\n\n–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${booking.id}`,
      extraGoToHomeKeyboard
    );
  } catch(err) {
    if(err instanceof BookingError) {
      console.error(`[BookingMake/${err.code}] ${err.message}`, err.metadata);

      await ctx.editMessageText(
        `‚ùó ${err.message}`,
        extraGoToHomeKeyboard
      );
    } else {
      console.error(`[BookingMake]`, err);
      await ctx.editMessageText(
        `‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`,
        extraGoToHomeKeyboard
      );
    }
  } finally {
    if (bookingTimeouts[userId]) {
      clearTimeout(bookingTimeouts[userId]);
      delete bookingTimeouts[userId];
    }

    delete bookingSessions[userId];    

    await ctx.answerCallbackQuery();
  }
}

export async function sendBookingCancel(ctx: ControllerContext, userId: number) {
  if(!userId) return;

  if(bookingTimeouts[userId]) {
    clearTimeout(bookingTimeouts[userId]);
    delete bookingTimeouts[userId];
  }

  delete bookingSessions[userId];

  await ctx.answerCallbackQuery();
  await ctx.editMessageText("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", extraGoToHomeKeyboard);
}