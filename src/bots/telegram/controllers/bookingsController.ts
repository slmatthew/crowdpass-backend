import { CoreBookingController } from "@/bots/core/controllers/CoreBookingsController";
import { TelegramStrategy } from "./TelegramStrategy";
import { ControllerContext } from "./ControllerContext";
import { InlineKeyboard } from "grammy";
import { extraGoToHomeKeyboard } from "../constants/extraGoToHomeKeyboard";
import { BookingService } from "@/services/bookingService";
import { SharedContext } from "@/types/grammy/SessionData";
import { currencyCache } from "../utils/currencyCache";
import { formatAmount } from "../utils/formatAmount";

const TELEGRAM_PAYMENTS_LIVE = process.env.NODE_ENV !== 'development';
const TELEGRAM_PAYMENTS_TOKEN = TELEGRAM_PAYMENTS_LIVE ? process.env.TELEGRAM_PAYMENTS_LIVE_TOKEN : process.env.TELEGRAM_PAYMENTS_TEST_TOKEN;

const controller = new CoreBookingController(TelegramStrategy);

export async function sendMyBookings(ctx: ControllerContext, page: number = 1) {
  const user = ctx.sfx.user!;
  const result = await controller.sendMyBookings(user, page);
  TelegramStrategy.doActionReply(ctx, result);
}

export async function sendMyBookingPaySimple(ctx: ControllerContext, bookingId: number, page: number) {
  if(TELEGRAM_PAYMENTS_LIVE) {
    try {
      await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    } catch(err) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
    return;
  }

  const user = ctx.sfx.user!;
  const booking = await BookingService.getById(bookingId);

  if(!booking || !user || booking.userId !== user.id) {
    try {
      await ctx.answerCallbackQuery('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
    } catch(err) {}
    return await sendMyBookings(ctx, page);
  }

  const res = await BookingService.payBooking(booking.id);
  
  try {
    if(res) {
      await ctx.answerCallbackQuery('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ');
      await sendMyBookings(ctx, page);
    } else {
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      await sendMyBookings(ctx, page);
    }
  } catch(err) {
    if(res) {
      await ctx.reply('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ');
      await sendMyBookings(ctx, page);
    } else {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      await sendMyBookings(ctx, page);
    }
  }
}

export async function sendMyBookingPay(ctx: ControllerContext, bookingId: number, page: number) {
  const user = ctx.sfx.user!;
  const booking = await BookingService.getById(bookingId);

  const keyboard = new InlineKeyboard().text('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º', TelegramStrategy.callbackPayloads.myBookingsPage(page));

  const reject = async (text: string) => {
    try {
      await ctx.answerCallbackQuery();
      await ctx.editMessageText(text, { reply_markup: keyboard });
    } catch(err) {
      await ctx.reply(text, { reply_markup: keyboard });
    }
  };

  if(!booking || booking.userId !== user.id || booking.status !== "ACTIVE") {
    await reject("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
    return;
  }

  if(booking.bookingTickets.length === 0) {
    await reject("‚ùå –≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ–ø–ª–∞—Ç–∏—Ç—å");
    return;
  }

  const events: string[] = [];
  booking.bookingTickets.forEach(bt => {
    const str = `¬´${bt.ticket.ticketType.event.name}¬ª`;
    if(events.includes(str)) return;

    events.push(`¬´${bt.ticket.ticketType.event.name}¬ª`);
  });

  const event = events.join(', ');
  
  let price: number = 0;
  const labeledPrice: { label: string, amount: number }[] = [];
  for(const bkTicket of booking.bookingTickets) {
    price += Number(bkTicket.ticket.ticketType.price);
    labeledPrice.push({
      label: `${bkTicket.ticket.ticketType.name} #${bkTicket.ticket.ticketType.event.id}-${bkTicket.ticket.id}`,
      amount: Number(bkTicket.ticket.ticketType.price) * 100
    });
  }

  const currency = await currencyCache.getCurrency();
  if(price <= Number(currency.min_amount) || price >= Number(currency.max_amount)) {
    if(TELEGRAM_PAYMENTS_LIVE) {
      await ctx.answerCallbackQuery('–û–ø–ª–∞—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
      await ctx.reply(
        `‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ Telegram.\n\n` +
        `–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ /support –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∫ –æ–ø–ª–∞—Ç–µ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏: ${booking.id}`,
        { reply_markup: extraGoToHomeKeyboard }
      );
    } else {
      await sendMyBookingPaySimple(ctx, bookingId, page);
    }

    return;
  }

  await ctx.api.sendInvoice(
    ctx.chat!.id,
    `CrowdPass ‚ÑñB${booking.id}`,
    `–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ${booking.id} –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –±–∏–ª–µ—Ç—ã (${booking.bookingTickets.length} —à—Ç.) –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ(-—è) ${event} –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${formatAmount(price, currency)}`,
    `${booking.id}-${user.id}-booking`,
    'RUB',
    labeledPrice,
    {
      provider_token: TELEGRAM_PAYMENTS_TOKEN,
    },
  );
}

export async function sendMyBookingPayPreCheckout(ctx: ControllerContext) {
  if(!ctx.sfx.user || !ctx.preCheckoutQuery) return await ctx.answerPreCheckoutQuery(false, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');

  const bookingId = Number(ctx.match[1]);
  const userId = Number(ctx.match[2]);

  const booking = await BookingService.getById(bookingId);

  if(userId !== ctx.sfx.user.id || !booking || booking.userId !== ctx.sfx.user.id || booking.status !== "ACTIVE") {
    return await ctx.answerPreCheckoutQuery(false, { error_message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ' });
  }

  await ctx.answerPreCheckoutQuery(true); 
}

export async function sendMyBookingPaySuccess(ctx: SharedContext) {
  const payment = ctx.message?.successful_payment;
  if(!payment) return await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`);;

  const match = payment.invoice_payload.match(/^(\d+)-(\d+)-booking$/);
  if(!match) return await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`);;

  const bookingId = Number(match[1]);
  await BookingService.payBooking(bookingId);

  await ctx.reply(`‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚ÑñB${bookingId} –æ–ø–ª–∞—á–µ–Ω–æ`, {
    reply_markup: new InlineKeyboard()
      .text('üéüÔ∏è –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', TelegramStrategy.callbackPayloads.myBookingsPage(1)).row()
      .text('üé´ –ú–æ–∏ –±–∏–ª–µ—Ç—ã', TelegramStrategy.callbackPayloads.myTicketsPage(1)),
  });
}

export async function sendMyBookingCancel(ctx: ControllerContext, bookingId: number, page: number) {
  const user = ctx.sfx.user!;
  const result = await controller.sendMyBookingCancel(user, bookingId, page);
  TelegramStrategy.doActionReply(ctx, result);
}

export async function sendBookingStart(ctx: ControllerContext, eventId: number, fromPage: number, categoryId: number, subcategoryId: number) {
  const user = ctx.sfx.user!;
  const result = await controller.sendBookingStart(user, eventId, fromPage, categoryId, subcategoryId);
  TelegramStrategy.doActionReply(ctx, result);
}

export async function sendBookingSelectType(ctx: ControllerContext, ticketTypeId: number) {
  const user = ctx.sfx.user!;
  const result = await controller.sendBookingSelectType(user, ticketTypeId);
  TelegramStrategy.doActionReply(ctx, result);
}

export async function sendBookingConfirm(ctx: ControllerContext, userId: number) {
  const user = ctx.sfx.user!;
  const result = await controller.sendBookingConfirm(user, userId);
  TelegramStrategy.doActionReply(ctx, result);
}

export async function sendBookingCancel(ctx: ControllerContext, userId: number) {
  const user = ctx.sfx.user!;
  const result = await controller.sendBookingCancel(user, userId);
  TelegramStrategy.doActionReply(ctx, result);
}