import { BookingService } from "@/services/bookingService";
import { CoreController } from "./CoreController";
import { ActionReply, ControllerResponse } from "./types/ControllerResponse";
import { User } from "@prisma/client";
import { PAGE_SIZE } from "@/constants/appConstants";
import { KeyboardBuilder } from "../ui/KeyboardBuilder";
import dayjs from "dayjs";
import { BookingError } from "@/types/errors/BookingError";
import { bookingSessionService } from "@/bots/core/services/BookingSessionService";
import { TicketService } from "@/services/ticketService";

export class CoreBookingController extends CoreController {
  async sendMyBookings(user: User, page: number = 1): Promise<ControllerResponse> {
    const bookings = await BookingService.getByUserId(user.id);

    if(bookings.length === 0) {
      return this.badResult("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π üòî");
    }

    const totalPages = Math.ceil(bookings.length / PAGE_SIZE);
    const startIndex = (page - 1) * PAGE_SIZE;
    const endIndex = startIndex + PAGE_SIZE;
    const bookingsPage = bookings.slice(startIndex, endIndex);

    let markdown = `üéüÔ∏è *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç—Ä. ${page}/${totalPages}):*\n\n`;
    let plain = `üéüÔ∏è –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç—Ä. ${page}/${totalPages}):\n\n`;

    const keyboard = new KeyboardBuilder();

    bookingsPage.forEach((booking, index) => {
      const event = booking.bookingTickets[0]?.ticket.ticketType.event;

      if(event) {
        markdown += `*${startIndex + index + 1}.* ${event.name}\nüìÖ ${dayjs(event.startDate).format("DD.MM.YYYY")} | üìç ${event.location}\n`;
        plain += `${startIndex + index + 1}. ${event.name}\nüìÖ ${dayjs(event.startDate).format("DD.MM.YYYY")} | üìç ${event.location}\n`;

        const ticketGroups = booking.bookingTickets.reduce((acc, bt) => {
          const type = bt.ticket.ticketType.name;
          const price = (bt.ticket.ticketType.price as unknown) as number;
          const key = `${type}_${price}`;
          if (!acc[key]) {
            acc[key] = { type, price, count: 0 };
          }
          acc[key].count++;
          return acc;
        }, {} as Record<string, { type: string; price: number; count: number }>);

        markdown += `üéüÔ∏è –ë–∏–ª–µ—Ç—ã:\n`;
        plain += `üéüÔ∏è –ë–∏–ª–µ—Ç—ã:\n`;

        for (const groupKey in ticketGroups) {
          const group = ticketGroups[groupKey];
          const totalCost = group.price * group.count;
          markdown += `- ${group.type} √ó ${group.count} ‚Äî ${group.price}‚ÇΩ (${totalCost}‚ÇΩ)\n`;
          plain += `- ${group.type} √ó ${group.count} ‚Äî ${group.price}‚ÇΩ (${totalCost}‚ÇΩ)\n`;
        }

        markdown += `\n`;
        plain += `\n`;

        keyboard.callbackButton(`üí∏ #${startIndex + index + 1}`, this.strategy.callbackPayloads.myBookingPay(booking.id, page));
        keyboard.callbackButton(`‚ùå #${startIndex + index + 1}`, this.strategy.callbackPayloads.myBookingCancel(booking.id, page));
        keyboard.row();
      }
    });

    if(page > 1) keyboard.callbackButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", this.strategy.callbackPayloads.myBookingsPage(page - 1));
    if(page < totalPages) keyboard.callbackButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", this.strategy.callbackPayloads.myBookingsPage(page + 1));
  
    keyboard.row();
    keyboard.callbackButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', this.GO_HOME_CALLBACK);

    return {
      ok: true,
      action: {
        text: { plain, markdown },
        keyboard: keyboard.build()
      }
    };
  }

  async sendMyBookingCancel(user: User, bookingId: number, page: number) {
    try {
      const booking = await BookingService.getById(bookingId);
      if(!booking) return this.badResult("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
      if(booking.userId !== user.id) return this.badResult("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");

      await BookingService.cancelBooking(bookingId);
      
      return {
        ok: true,
        action: {
          text: { plain:  "‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞." },
          isNotify: true,
        } as ActionReply,
      };
    } catch(err) {
      const result = {
        ok: false,
        action: {
          text: { plain: '' },
        } as ActionReply
      };

      if(err instanceof BookingError) {
        console.error(`[BookingCancel/${err.code}] ${err.message}`, err.metadata);
  
        result.action.text.plain = `‚ùó ${err.message}`;
      } else {
        console.error(`[BookingCancel]`, err);
        result.action.text.plain = `‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`;
      }

      return result;
    }
  }

  async sendBookingStart(user: User, eventId: number, fromPage: number, categoryId: number, subcategoryId: number) {
    let backButtonPayload: string | { action: string } = this.GO_HOME_CALLBACK;
    if(categoryId === 0 && subcategoryId === 0) {
      backButtonPayload = this.strategy.callbackPayloads.eventDetails(eventId, fromPage);
    } else if(categoryId !== 0) {
      backButtonPayload = this.strategy.callbackPayloads.eventDetailsCategory(eventId, fromPage, categoryId);
    } else if(subcategoryId !== 0) {
      backButtonPayload = this.strategy.callbackPayloads.eventDetailsSubcategory(eventId, fromPage, subcategoryId);
    }
  
    bookingSessionService.setSession(user.id, { step: 'start', eventId, fromPage });
  
    bookingSessionService.setTimeout(user.id, setTimeout(async () => {
      if(bookingSessionService.getSession(user.id)) {
        bookingSessionService.deleteSession(user.id);
      }
    }, 120000));
  
    const ticketTypes = await TicketService.getTicketTypesForEvent(eventId, true);
    if(ticketTypes.length === 0) {
      return {
        ok: true,
        action: {
          text: { plain: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤." },
          keyboard: new KeyboardBuilder().inline().callbackButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', backButtonPayload).build(),
        }
      };
    }
  
    const keyboard = new KeyboardBuilder();
    let totalAvailable: number = 0;
  
    ticketTypes.forEach((type) => {
      const availableCount = type.tickets.filter(t => t.status === "AVAILABLE").length;
      totalAvailable += availableCount;
      if (availableCount > 0) {
        keyboard.callbackButton(`${type.name} ‚Äî ${type.price}‚ÇΩ (${availableCount} —à—Ç.)`, this.strategy.callbackPayloads.bookingSelectType(type.id));
        keyboard.row();
      }
    });
  
    if(totalAvailable === 0) {
      return {
        ok: true,
        action: {
          text: { plain: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤." },
          keyboard: new KeyboardBuilder().inline().callbackButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', backButtonPayload).build(),
        }
      };
    }
  
    keyboard.callbackButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", backButtonPayload);
  
    return {
      ok: true,
      action: {
        text: { plain: "üéüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:" },
        keyboard: keyboard.build(),
      }
    };
  }
  
  async sendBookingSelectType(user: User, ticketTypeId: number) {
    const session = bookingSessionService.getSession(user.id);
    if(!session || session.step !== 'start') {
      if(session) bookingSessionService.deleteSession(user.id);
      return {
        ok: false,
        action: {
          text: { plain: "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ" },
          isNotify: true,
        } as ActionReply,
      };
    }
  
    bookingSessionService.setSession(user.id, { ...session, step: 'ask_count', ticketTypeId });
  
    return {
      ok: true,
      action: {
        text: { plain: "üéüÔ∏è –°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã" },
      } as ActionReply,
    };
  }
  
  async sendBookingConfirm(user: User, userId: number) {
    const session = bookingSessionService.getSession(user.id);
    if(!session || !userId || user.id !== userId) {
      return {
        ok: false,
        action: {
          text: { plain: "‚ö†Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." },
          isNotify: true,
        } as ActionReply,
      };
    }
  
    if (!session.ticketTypeId || !session.ticketsCount || session.step !== 'end') {
      bookingSessionService.deleteSession(user.id);
      return {
        ok: false,
        action: {
          text: { plain: "‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ." },
        } as ActionReply,
      };
    }
  
    try {
      const booking = await BookingService.makeBooking(user.id, session.ticketTypeId, session.ticketsCount);

      return this.goodActionReply(
        { plain: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ ${session.ticketsCount} –±–∏–ª–µ—Ç(–∞/–æ–≤)!\n\n–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${booking.id}` },
        false,
        new KeyboardBuilder().inline().callbackButton('üéüÔ∏è –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', this.strategy.callbackPayloads.myBookingsPage(1)).build(),
      );
    } catch(err) {
      if(err instanceof BookingError) {
        console.error(`[BookingMake/${err.code}] ${err.message}`, err.metadata);

        return this.badResult(`‚ùó ${err.message}`, undefined, true);
      } else {
        console.error(`[BookingMake]`, err);
        return this.badResult(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`, undefined, true);
      }
    } finally {
      bookingSessionService.deleteSession(user.id);
    }
  }
  
  async sendBookingCancel(user: User, userId: number) {
    if(!userId || user.id !== userId) return this.badResult("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.");
  
    bookingSessionService.deleteSession(user.id);
  
    return this.goodActionReply({ plain: "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ" }, false, this.GO_HOME_KEYBOARD);
  }
}