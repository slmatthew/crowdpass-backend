import { MessageContext, KeyboardBuilder } from "vk-io";
import { EventService } from "@/services/eventService";
import { PAGE_SIZE } from "@/constants/appConstants";

export async function handleEvents(ctx: MessageContext, page: number = 1) {
  return await sendEventsPage(ctx, page);
}

export async function sendEventsPage(ctx: MessageContext, page: number) {
  const events = await EventService.getAllEvents();

  if (!events.length) {
    return ctx.send("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üòî");
  }

  const totalPages = Math.ceil(events.length / PAGE_SIZE);
  const startIndex = (page - 1) * PAGE_SIZE;
  const pageEvents = events.slice(startIndex, startIndex + PAGE_SIZE);

  let text = `üéüÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å—Ç—Ä. ${page}/${totalPages}):\n\n`;

  const keyboard = new KeyboardBuilder();

  pageEvents.forEach((event, index) => {
    const eventNumber = startIndex + index + 1;
    text += `${eventNumber}. ${event.name} (${new Date(event.startDate).toLocaleDateString()})\n`;
    keyboard.textButton({
      label: `${eventNumber}`,
      payload: { action: `event_${event.id}_${page}` },
    });
  });

  keyboard.row();

  if (page > 1) {
    keyboard.textButton({
      label: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
      payload: { action: `page_${page - 1}` },
    });
  }

  if (page < totalPages) {
    keyboard.textButton({
      label: "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
      payload: { action: `page_${page + 1}` },
    });
  }

  keyboard.row().textButton({
    label: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    payload: { action: "go_to_home" },
  });

  keyboard.inline();

  await ctx.send(text, { keyboard });
}
