import { UserService } from "@/services/user.service";
import { UserError } from "@/types/errors/UserError";
import { Platform } from "@prisma/client";
import { KeyboardBuilder, MessageContext } from "vk-io";
import { mainMenuKeyboard } from "../markups/mainMenu";

export async function sendLink(ctx: MessageContext) {
  try {
    const { code, linkUrl } = await UserService.startLinkProcedure({
      sourceUserId: ctx.state.user.id,
      targetPlatform: Platform.TELEGRAM,
    });

    const keyboard = new KeyboardBuilder()
      .urlButton({ label: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ä–µ–∑ Telegram", url: linkUrl })
      .inline();

    await ctx.send(`üß© –î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram:\n\n${linkUrl}`, { keyboard });
  } catch (err: any) {
    await ctx.send(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`, { keyboard: mainMenuKeyboard, });
  }
}

export async function sendLinkConfirm(ctx: MessageContext) {
  if(!ctx.messagePayload.code) return await ctx.send('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');

  try {
    const user = await UserService.confirmLink(ctx.messagePayload.code);
    await ctx.send(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.firstName}!`, { keyboard: mainMenuKeyboard, });
  } catch(err) {
    if(err instanceof UserError) {
      console.error(`[vk/LinkCommand/${err.code}] ${err.message}`, err.metadata);
      await ctx.send(`‚ùó ${err.message}`, { keyboard: mainMenuKeyboard, });
    } else {
      console.error('[vk/LinkCommand]', err);
      await ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', { keyboard: mainMenuKeyboard, });
    }
  }
}