import { MessageContext, KeyboardBuilder } from "vk-io";
import { bookingSessions, bookingTimeouts } from "../sessions/bookingSessions";
import { TicketService } from "@/services/ticketService";
import { BookingService } from "@/services/bookingService";
import { BookingError } from "@/types/errors/BookingError";

export async function handleBookingStart(ctx: MessageContext, eventId: number, fromPage: number) {
  const userId = ctx.state.user.id.toString();

  bookingSessions[userId] = { eventId, fromPage };

  bookingTimeouts[userId] = setTimeout(async () => {
    if (bookingSessions[userId]) {
      await ctx.send("üîî –í—ã –Ω–∞—á–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –µ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.");
      delete bookingTimeouts[userId];
    }
  }, 120000);

  const ticketTypes = await TicketService.getTicketTypesForEvent(eventId, true);

  if (!ticketTypes.length) {
    await ctx.send("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.");
    return;
  }

  const keyboard = new KeyboardBuilder();

  ticketTypes.forEach((type) => {
    const available = type.tickets.filter(t => t.status === "AVAILABLE").length;
    if (available > 0) {
      keyboard.textButton({
        label: `${type.name} ‚Äî ${type.price}‚ÇΩ (${available} —à—Ç.)`,
        payload: { action: `selectType_${type.id}` },
      }).row();
    }
  });

  keyboard.textButton({
    label: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    payload: { action: `event_${eventId}_${fromPage}` },
  }).inline();

  await ctx.send("üéüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:", { keyboard });
}

export async function handleTicketTypeSelect(ctx: MessageContext, ticketTypeId: number) {
  const userId = ctx.state.user.id.toString();
  const session = bookingSessions[userId];

  if (!session) {
    return ctx.send("‚ùó –°–µ—Å—Å–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
  }

  session.ticketTypeId = ticketTypeId;
  session.step = "awaiting_tickets_count";

  return ctx.send("üéüÔ∏è –°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2).");
}

export async function handleBookingConfirm(ctx: MessageContext, userId: string) {
  const session = bookingSessions[userId];
  const user = ctx.state.user;

  if (!session || !session.ticketTypeId || !session.ticketsCount) {
    return ctx.send("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.");
  }

  try {
    const booking = await BookingService.makeBooking(user.id, session.ticketTypeId, session.ticketsCount);
    await ctx.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ ${session.ticketsCount} –±–∏–ª–µ—Ç(–∞/–æ–≤)!\n–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${booking.id}`);
  } catch (err) {
    if (err instanceof BookingError) {
      await ctx.send(`‚ùó ${err.message}`);
    } else {
      await ctx.send("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  } finally {
    clearTimeout(bookingTimeouts[userId]);
    delete bookingTimeouts[userId];
    delete bookingSessions[userId];
  }
}

export async function handleBookingCancel(ctx: MessageContext, userId: string) {
  clearTimeout(bookingTimeouts[userId]);
  delete bookingTimeouts[userId];
  delete bookingSessions[userId];

  await ctx.send("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
}
